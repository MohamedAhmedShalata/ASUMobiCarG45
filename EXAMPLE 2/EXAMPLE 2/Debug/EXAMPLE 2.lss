
EXAMPLE 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  00000736  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000201  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d4  00000000  00000000  00000e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
   DDRA = 0b00000111;
  6c:	87 e0       	ldi	r24, 0x07	; 7
  6e:	8a bb       	out	0x1a, r24	; 26
   DDRB = 0b00000000;
  70:	17 ba       	out	0x17, r1	; 23
   PORTB = 0b11111111;
  72:	8f ef       	ldi	r24, 0xFF	; 255
  74:	88 bb       	out	0x18, r24	; 24
    {
		if (PINB == 0b11111110)  {PORTA = 0b00000001;}
			
			else if (PINB == 0b11111101)  {PORTA = 0b00000011;}
				
				else if (PINB == 0b11111011)  {PORTA = 0b00000111;}
  76:	37 e0       	ldi	r19, 0x07	; 7
   PORTB = 0b11111111;
    while (1) 
    {
		if (PINB == 0b11111110)  {PORTA = 0b00000001;}
			
			else if (PINB == 0b11111101)  {PORTA = 0b00000011;}
  78:	23 e0       	ldi	r18, 0x03	; 3
   DDRA = 0b00000111;
   DDRB = 0b00000000;
   PORTB = 0b11111111;
    while (1) 
    {
		if (PINB == 0b11111110)  {PORTA = 0b00000001;}
  7a:	91 e0       	ldi	r25, 0x01	; 1
  7c:	86 b3       	in	r24, 0x16	; 22
  7e:	8e 3f       	cpi	r24, 0xFE	; 254
  80:	11 f4       	brne	.+4      	; 0x86 <main+0x1a>
  82:	9b bb       	out	0x1b, r25	; 27
  84:	fb cf       	rjmp	.-10     	; 0x7c <main+0x10>
			
			else if (PINB == 0b11111101)  {PORTA = 0b00000011;}
  86:	86 b3       	in	r24, 0x16	; 22
  88:	8d 3f       	cpi	r24, 0xFD	; 253
  8a:	11 f4       	brne	.+4      	; 0x90 <main+0x24>
  8c:	2b bb       	out	0x1b, r18	; 27
  8e:	f6 cf       	rjmp	.-20     	; 0x7c <main+0x10>
				
				else if (PINB == 0b11111011)  {PORTA = 0b00000111;}
  90:	86 b3       	in	r24, 0x16	; 22
  92:	8b 3f       	cpi	r24, 0xFB	; 251
  94:	99 f7       	brne	.-26     	; 0x7c <main+0x10>
  96:	3b bb       	out	0x1b, r19	; 27
  98:	f1 cf       	rjmp	.-30     	; 0x7c <main+0x10>

0000009a <_exit>:
  9a:	f8 94       	cli

0000009c <__stop_program>:
  9c:	ff cf       	rjmp	.-2      	; 0x9c <__stop_program>
