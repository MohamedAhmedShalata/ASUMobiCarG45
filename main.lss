
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000034  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000180  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fa  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000020e  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000668  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a0  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000018  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

void init_PWM(void)
	{

		//DDRB  |=(1<<PB3	);
		DDRD  |=(1<<PD7); //(1<<PD4)|(1<<PD5)|
  6c:	8f 9a       	sbi	0x11, 7	; 17

		//TCCR0 |=(1<<WGM00)|(1<<COM01)|(1<<CS01)|(1<<CS00); // TCNT0(counter) & OCR0(analog value) (1<<COM00)||(1<<WGM01) 
		TCCR2 |=(1<<WGM20)|(1<<COM21)|(1<<CS22);  // TCNT2(counter) & OCR2(analog value) |(1<<COM20)|(1<<CS21) 
  6e:	85 b5       	in	r24, 0x25	; 37
  70:	84 66       	ori	r24, 0x64	; 100
  72:	85 bd       	out	0x25, r24	; 37
		//TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); // TCNT1(counter) & CR1AL(analog value) (1<<COM1B0)|(1<<COM1A0)|

			//Start PWM
		//TCCR1B|=(1<<CS11)|(1<<CS10); //TCNT1(counter) & CR1BL(analog value)
		//TCNT0  =0;
		TCNT2  =0;
  74:	14 bc       	out	0x24, r1	; 36
void PWM_PD7(unsigned char pulse_width);

int main(void)
{	
init_PWM();
	DDRB = 0;
  76:	17 ba       	out	0x17, r1	; 23
	PORTB = 0xFF;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	88 bb       	out	0x18, r24	; 24
	DDRA = 0x0F;
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	8a bb       	out	0x1a, r24	; 26
  80:	9a e0       	ldi	r25, 0x0A	; 10
	}
*/

void PWM_PD7(unsigned char pulse_width)
	{
		OCR2   = pulse_width;
  82:	26 e9       	ldi	r18, 0x96	; 150
  84:	01 c0       	rjmp	.+2      	; 0x88 <main+0x1c>
int main(void)
{	
init_PWM();
	DDRB = 0;
	PORTB = 0xFF;
	DDRA = 0x0F;
  86:	9a e0       	ldi	r25, 0x0A	; 10
	uint8_t pressed = 10;
	while(1)
	{
	  
	if((PINB == 0b11111011) || (PINB == 0b11100000)) // go forward
  88:	86 b3       	in	r24, 0x16	; 22
  8a:	8b 3f       	cpi	r24, 0xFB	; 251
  8c:	19 f0       	breq	.+6      	; 0x94 <main+0x28>
  8e:	86 b3       	in	r24, 0x16	; 22
  90:	80 3e       	cpi	r24, 0xE0	; 224
  92:	41 f4       	brne	.+16     	; 0xa4 <main+0x38>
	}
*/

void PWM_PD7(unsigned char pulse_width)
	{
		OCR2   = pulse_width;
  94:	23 bd       	out	0x23, r18	; 35
	if((PINB == 0b11111011) || (PINB == 0b11100000)) // go forward
		{
		pressed = 0;
		PWM_PD7(150);
		
		PORTA |=(1<<PA1) | (1<<PA3);
  96:	8b b3       	in	r24, 0x1b	; 27
  98:	8a 60       	ori	r24, 0x0A	; 10
  9a:	8b bb       	out	0x1b, r24	; 27
		PORTA &= ~( 1 << PA2 );
  9c:	da 98       	cbi	0x1b, 2	; 27
		PORTA &= ~( 1 << PA0 );
  9e:	d8 98       	cbi	0x1b, 0	; 27
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	f2 cf       	rjmp	.-28     	; 0x88 <main+0x1c>
		}
else if ((PINB == 0b11111100) || (PINB == 0b11111110)|| (PINB == 0b11111101))  // go RIGHT
  a4:	86 b3       	in	r24, 0x16	; 22
  a6:	8c 3f       	cpi	r24, 0xFC	; 252
  a8:	31 f0       	breq	.+12     	; 0xb6 <main+0x4a>
  aa:	86 b3       	in	r24, 0x16	; 22
  ac:	8e 3f       	cpi	r24, 0xFE	; 254
  ae:	19 f0       	breq	.+6      	; 0xb6 <main+0x4a>
  b0:	86 b3       	in	r24, 0x16	; 22
  b2:	8d 3f       	cpi	r24, 0xFD	; 253
  b4:	41 f4       	brne	.+16     	; 0xc6 <main+0x5a>
	}
*/

void PWM_PD7(unsigned char pulse_width)
	{
		OCR2   = pulse_width;
  b6:	23 bd       	out	0x23, r18	; 35
else if ((PINB == 0b11111100) || (PINB == 0b11111110)|| (PINB == 0b11111101))  // go RIGHT
		{
		pressed = 1;
		PWM_PD7(150);
					
		PORTA |= ( 1 << PA1 ) | ( 1 << PA2 );
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	86 60       	ori	r24, 0x06	; 6
  bc:	8b bb       	out	0x1b, r24	; 27
		PORTA &= ~( 1 << PA0 );
  be:	d8 98       	cbi	0x1b, 0	; 27
		PORTA &= ~( 1 << PA3 );
  c0:	db 98       	cbi	0x1b, 3	; 27
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	e1 cf       	rjmp	.-62     	; 0x88 <main+0x1c>
		
		}
		
else if ((PINB == 0b11100111) || (PINB == 0b11101111)|| (PINB == 0b11110111)) // go Left
  c6:	86 b3       	in	r24, 0x16	; 22
  c8:	87 3e       	cpi	r24, 0xE7	; 231
  ca:	31 f0       	breq	.+12     	; 0xd8 <main+0x6c>
  cc:	86 b3       	in	r24, 0x16	; 22
  ce:	8f 3e       	cpi	r24, 0xEF	; 239
  d0:	19 f0       	breq	.+6      	; 0xd8 <main+0x6c>
  d2:	86 b3       	in	r24, 0x16	; 22
  d4:	87 3f       	cpi	r24, 0xF7	; 247
  d6:	41 f4       	brne	.+16     	; 0xe8 <main+0x7c>
	}
*/

void PWM_PD7(unsigned char pulse_width)
	{
		OCR2   = pulse_width;
  d8:	23 bd       	out	0x23, r18	; 35
else if ((PINB == 0b11100111) || (PINB == 0b11101111)|| (PINB == 0b11110111)) // go Left
		{
		pressed = 2;
		PWM_PD7(150);
					
        PORTA |= ( 1 << PA0 ) | ( 1 << PA3 );
  da:	8b b3       	in	r24, 0x1b	; 27
  dc:	89 60       	ori	r24, 0x09	; 9
  de:	8b bb       	out	0x1b, r24	; 27
		PORTA &= ~( 1 << PA1 );
  e0:	d9 98       	cbi	0x1b, 1	; 27
		PORTA &= ~( 1 << PA2 );
  e2:	da 98       	cbi	0x1b, 2	; 27
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	d0 cf       	rjmp	.-96     	; 0x88 <main+0x1c>
		}
else if (PINB == 0b11111111)  // 
  e8:	86 b3       	in	r24, 0x16	; 22
  ea:	8f 3f       	cpi	r24, 0xFF	; 255
  ec:	69 f6       	brne	.-102    	; 0x88 <main+0x1c>
		{
		 if(pressed == 0)
  ee:	99 23       	and	r25, r25
  f0:	31 f4       	brne	.+12     	; 0xfe <main+0x92>
	}
*/

void PWM_PD7(unsigned char pulse_width)
	{
		OCR2   = pulse_width;
  f2:	23 bd       	out	0x23, r18	; 35
		{
		 if(pressed == 0)
		 {  
			PWM_PD7(150);
					
			PORTA |=(1<<PA2) | (1<<PA0);
  f4:	8b b3       	in	r24, 0x1b	; 27
  f6:	85 60       	ori	r24, 0x05	; 5
  f8:	8b bb       	out	0x1b, r24	; 27
			PORTA &= ~( 1 << PA1 );
  fa:	d9 98       	cbi	0x1b, 1	; 27
  fc:	07 c0       	rjmp	.+14     	; 0x10c <main+0xa0>
			PORTA &= ~( 1 << PA3 );

		 }
	else if(pressed == 1)
  fe:	91 30       	cpi	r25, 0x01	; 1
 100:	39 f4       	brne	.+14     	; 0x110 <main+0xa4>
	}
*/

void PWM_PD7(unsigned char pulse_width)
	{
		OCR2   = pulse_width;
 102:	23 bd       	out	0x23, r18	; 35
		 }
	else if(pressed == 1)
			{
			PWM_PD7(150);
					
		PORTA |= ( 1 << PA1 ) | ( 1 << PA2 );
 104:	8b b3       	in	r24, 0x1b	; 27
 106:	86 60       	ori	r24, 0x06	; 6
 108:	8b bb       	out	0x1b, r24	; 27
		PORTA &= ~( 1 << PA0 );
 10a:	d8 98       	cbi	0x1b, 0	; 27
		PORTA &= ~( 1 << PA3 );
 10c:	db 98       	cbi	0x1b, 3	; 27
 10e:	bc cf       	rjmp	.-136    	; 0x88 <main+0x1c>
			}
	else if(pressed == 2)
 110:	92 30       	cpi	r25, 0x02	; 2
 112:	09 f0       	breq	.+2      	; 0x116 <main+0xaa>
 114:	b8 cf       	rjmp	.-144    	; 0x86 <main+0x1a>
	}
*/

void PWM_PD7(unsigned char pulse_width)
	{
		OCR2   = pulse_width;
 116:	23 bd       	out	0x23, r18	; 35
			}
	else if(pressed == 2)
			{
			PWM_PD7(150);
					
		PORTA |= ( 1 << PA0 ) | ( 1 << PA3 );
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	89 60       	ori	r24, 0x09	; 9
 11c:	8b bb       	out	0x1b, r24	; 27
		PORTA &= ~( 1 << PA1 );
 11e:	d9 98       	cbi	0x1b, 1	; 27
		PORTA &= ~( 1 << PA2 );
 120:	da 98       	cbi	0x1b, 2	; 27
 122:	b2 cf       	rjmp	.-156    	; 0x88 <main+0x1c>

00000124 <init_PWM>:

void init_PWM(void)
	{

		//DDRB  |=(1<<PB3	);
		DDRD  |=(1<<PD7); //(1<<PD4)|(1<<PD5)|
 124:	8f 9a       	sbi	0x11, 7	; 17

		//TCCR0 |=(1<<WGM00)|(1<<COM01)|(1<<CS01)|(1<<CS00); // TCNT0(counter) & OCR0(analog value) (1<<COM00)||(1<<WGM01) 
		TCCR2 |=(1<<WGM20)|(1<<COM21)|(1<<CS22);  // TCNT2(counter) & OCR2(analog value) |(1<<COM20)|(1<<CS21) 
 126:	85 b5       	in	r24, 0x25	; 37
 128:	84 66       	ori	r24, 0x64	; 100
 12a:	85 bd       	out	0x25, r24	; 37
		//TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM10); // TCNT1(counter) & CR1AL(analog value) (1<<COM1B0)|(1<<COM1A0)|

			//Start PWM
		//TCCR1B|=(1<<CS11)|(1<<CS10); //TCNT1(counter) & CR1BL(analog value)
		//TCNT0  =0;
		TCNT2  =0;
 12c:	14 bc       	out	0x24, r1	; 36
		//TCNT1  =0;

	}
 12e:	08 95       	ret

00000130 <PWM_PD7>:
	}
*/

void PWM_PD7(unsigned char pulse_width)
	{
		OCR2   = pulse_width;
 130:	83 bd       	out	0x23, r24	; 35
	}
 132:	08 95       	ret

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
